import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';

class LocationService {
  /// Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn truy c·∫≠p v·ªã tr√≠
  static Future<bool> requestPermission() async {
    final status = await Permission.location.request();
    return status.isGranted;
  }

  /// Ki·ªÉm tra ƒë√£ c√≥ quy·ªÅn truy c·∫≠p v·ªã tr√≠ ch∆∞a
  static Future<bool> hasPermission() async {
    final status = await Permission.location.status;
    return status.isGranted;
  }

  /// L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
  static Future<Position?> getCurrentLocation() async {
    try {
      print('üîç LocationService.getCurrentLocation() called');
      
      // Ki·ªÉm tra quy·ªÅn
      final hasPermission = await checkPermission();
      if (!hasPermission) {
        print('‚ùå No location permission');
        return null;
      }

      // Ki·ªÉm tra d·ªãch v·ª• GPS
      final serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('‚ùå Location services are disabled');
        return null;
      }

      // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 10),
      );

      print('‚úÖ Location retrieved: ${position.latitude}, ${position.longitude}');
      return position;
    } catch (e) {
      print('‚ùå Error getting location: $e');
      return null;
    }
  }

  /// Ki·ªÉm tra permission
  static Future<bool> checkPermission() async {
    final status = await Permission.location.status;
    return status.isGranted;
  }

  /// M·ªü settings ƒë·ªÉ ng∆∞·ªùi d√πng c·∫•p quy·ªÅn
  static Future<void> openSettings() async {
    await openAppSettings();
  }

  /// T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (km)
  static double calculateDistance(
    double lat1,
    double lon1,
    double lat2,
    double lon2,
  ) {
    return Geolocator.distanceBetween(lat1, lon1, lat2, lon2) / 1000;
  }

  /// Ki·ªÉm tra 2 ƒëi·ªÉm c√≥ n·∫±m trong b√°n k√≠nh kh√¥ng
  static bool isWithinRadius(
    double lat1,
    double lon1,
    double lat2,
    double lon2,
    double radiusKm,
  ) {
    final distance = calculateDistance(lat1, lon1, lat2, lon2);
    return distance <= radiusKm;
  }
}

